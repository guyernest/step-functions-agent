# This lambda function will be used as a tool {{cookiecutter.tool_name}} for the AI Agent platform

# Imports for Tool
import json

# Imports for Lambda
from aws_lambda_powertools import Logger
from aws_lambda_powertools import Tracer
from aws_lambda_powertools.utilities import parameters

# Initialize the logger and tracer
logger = Logger(level="INFO")
tracer = Tracer()

# Tool Functions
{% for name in cookiecutter.tool_functions.functions_names %}
def {{name}}(
    {{cookiecutter.input_param_name}}: str
    ) -> str:
    """{{cookiecutter.tool_description}}.
    Args:
        {{cookiecutter.input_param_name}} (str): {{cookiecutter.input_param_description}}.

    Returns:
        str: {{cookiecutter.tool_description}},
             or an error message if the execution fails.

    Raises:
        Exception: Any exception during query execution will be caught and returned as an error message.
    """
    try:
        
        result = "Logic Implementation Here (generated by LLM)"
        return json.dumps(result, indent=2)
    except Exception as e:
        return f"Error executing query: {str(e)}"
{% endfor %}


@tracer.capture_method
def lambda_handler(event, context):
    # Get the tool name from the input event
    tool_use = event
    tool_name = tool_use['name']
    tool_input = tool_use['input']

    logger.info(f"Tool name: {tool_name}")
    match tool_name:
        {% for name in cookiecutter.tool_functions.functions_names %}
        case '{{name}}':
            result = {{name}}(tool_input['{{cookiecutter.input_param_name}}'])
        {% endfor %}

        # Add more tools functions here as needed

        case _:
            result = json.dumps({
                'error': f"Unknown tool name: {tool_name}"
            })

    return {
        "type": "tool_result",
        "name": tool_name,
        "tool_use_id": tool_use["id"],
        "content": result
    }

if __name__ == "__main__":

    {% for name in cookiecutter.tool_functions.functions_names %}
    # Test {{name}} function
    # Test event 
    test_event = {
        "name": "{{name}}",
        "id": "execute_unique_id",
        "input": {
            "{{cookiecutter.input_param_name}}": "{{cookiecutter.input_test_value}}"
        },
        "type": "tool_use"
    }
        
    # Call lambda handler with test events
    print("\nTesting tool {{name}}:")
    response = lambda_handler(test_event, None)
    print(response)
    {% endfor %}
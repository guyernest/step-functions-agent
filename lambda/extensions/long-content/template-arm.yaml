AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Lambda function with Lambda Runtime API Proxy extension for ARM64

Parameters:
  DeploymentStage:
    Type: String
    Default: dev
    Description: Deployment stage name
    AllowedValues:
    - dev
    - test
    - prod

  AgentContextTableName:
    Type: String
    Default: AgentContext
    Description: Name of the DynamoDB table to store large content

  MaxContentSize:
    Type: Number
    Default: 5000
    Description: Maximum size of content fields before storing in DynamoDB

  # Add a parameter to control whether to create the DynamoDB table
  CreateDynamoDBTable:
    Type: String
    Default: "false"
    Description: Whether to create the DynamoDB table or not (set to 'false' if the table already exists)
    AllowedValues:
    - "true"
    - "false"

Conditions:
  ShouldCreateTable: !Equals [ !Ref CreateDynamoDBTable, "true" ]

Resources:
  # DynamoDB table for storing large content - Only created if CreateDynamoDBTable is true
  AgentContextTable:
    Type: AWS::DynamoDB::Table
    Condition: ShouldCreateTable
    Properties:
      TableName: !Ref AgentContextTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      SSESpecification:
        SSEEnabled: true
      TimeToLiveSpecification:
        AttributeName: expires_at
        Enabled: true
      Tags:
      - Key: Project
        Value: LambdaRuntimeAPIProxy
      - Key: Environment
        Value: !Ref DeploymentStage

  # The Lambda Layer for our ARM64 extension
  ProxyExtensionLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub "lambda-runtime-api-proxy-arm-${DeploymentStage}"
      Description: Lambda Runtime API Proxy extension for ARM64
      Content: ./extension-arm.zip
      CompatibleRuntimes:
        - python3.9
        - python3.10
        - python3.11
        - python3.12
        - nodejs16.x
        - nodejs18.x
        - nodejs20.x
        - provided.al2
        - java11
        - java17
        - java21
      CompatibleArchitectures:
        - arm64

  # Python Lambda function to test the Runtime API Proxy extension on ARM64
  ProxyTestFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "lambda-runtime-api-proxy-test-arm-${DeploymentStage}"
      CodeUri: tests/
      Handler: test_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - arm64
      Timeout: 30
      MemorySize: 128
      Layers:
        - !Ref ProxyExtensionLayer
      Environment:
        Variables:
          LOG_LEVEL: INFO
          LRAP_DEBUG: "true"
          AWS_LAMBDA_EXEC_WRAPPER: /opt/extensions/lrap-wrapper/wrapper
          AGENT_CONTEXT_TABLE: !Ref AgentContextTableName
          MAX_CONTENT_SIZE: !Ref MaxContentSize
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AgentContextTableName
      Tags:
        Project: LambdaRuntimeAPIProxy
        Environment: !Ref DeploymentStage
        Architecture: arm64

Outputs:
  ProxyTestFunctionArn:
    Description: "Test Lambda Function ARN (ARM64)"
    Value: !GetAtt ProxyTestFunction.Arn
  ProxyTestFunctionName:
    Description: "Test Lambda Function Name (ARM64)"
    Value: !Ref ProxyTestFunction
  ProxyTestFunctionRole:
    Description: "IAM Role created for Test function (ARM64)"
    Value: !GetAtt ProxyTestFunctionRole.Arn
  ProxyExtensionLayerArn:
    Description: "Lambda Runtime API Proxy Extension Layer ARN (ARM64)"
    Value: !Ref ProxyExtensionLayer

version: 0.2

# Router buildspec that selects the appropriate buildspec based on the BUILD_TYPE environment variable
# Each CodeBuild project should set BUILD_TYPE to the component type it's building
# Examples:
#   BUILD_TYPE=sql-stack - Builds the SQL Agent Stack
#   BUILD_TYPE=lambda-extension - Builds the Lambda Extension
#   BUILD_TYPE=web-scraper - Builds the Web Scraper Lambda

phases:
  install:
    runtime-versions:
      python: 3.9
      nodejs: 18
      golang: 1.21
      java: corretto17
    commands:
      - echo "Building component type: ${BUILD_TYPE}"
      - yum update -y
      - pip install --upgrade pip
      - |
        if [[ "$BUILD_TYPE" == *"lambda-extension"* || "$BUILD_TYPE" == *"rust"* ]]; then
          # Install Rust
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          
          # Install rust dependencies
          yum install -y zip cmake gcc gcc-c++ make openssl-devel
          pip install cargo-lambda
          
          # Setup cross-compilation for ARM64
          rustup target add aarch64-unknown-linux-musl
          rustup target add x86_64-unknown-linux-musl
        fi
      - pip install aws-sam-cli
      - |
        if [[ "$BUILD_TYPE" == *"-stack"* ]]; then
          pip install -r requirements.txt
        fi

  build:
    commands:
      - |
        # SQL Agent Stack
        if [ "$BUILD_TYPE" == "sql-stack" ]; then
          echo "Building SQL Agent Stack..."
          python -m cdk synth SQLAgentStack --output cdk-templates
          ls -la cdk-templates
        
        # Lambda Extension
        elif [ "$BUILD_TYPE" == "lambda-extension" ]; then
          echo "Building Lambda Extension..."
          cd lambda/extensions/long-content
          sed -i 's/^.*strip.*$/\t@echo "Skipping strip command for cross-compiled binaries..."/' Makefile
          make build
          cd ../../..
        
        # Web Scraper Lambda (TypeScript)
        elif [ "$BUILD_TYPE" == "web-scraper" ]; then
          echo "Building Web Scraper Lambda..."
          cd lambda/tools/web-scraper
          npm install
          npm run build
          cd ../../..
          
        # Python Lambda (e.g., db-interface)
        elif [ "$BUILD_TYPE" == "db-interface" ]; then
          echo "Building DB Interface Lambda..."
          cd lambda/tools/db-interface
          pip install -r requirements.txt
          cd ../../..
        
        # Rust Lambda (e.g., WebScraperMemory)
        elif [ "$BUILD_TYPE" == "web-scraper-memory" ]; then
          echo "Building WebScraperMemory Lambda..."
          cd lambda/tools/WebScraperMemory
          cargo lambda build --release --arm64
          cd ../../..
        
        # Add other build types as needed
        
        else
          echo "Error: Unknown BUILD_TYPE: $BUILD_TYPE"
          exit 1
        fi
      
  post_build:
    commands:
      - |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        AWS_REGION=$AWS_DEFAULT_REGION
        echo "Using AWS Region: $AWS_REGION"
        S3_BUCKET="step-functions-agent-artifacts-${AWS_REGION}-${AWS_ACCOUNT_ID}"
        echo "Using S3 bucket: $S3_BUCKET"
        export AWS_ACCOUNT_ID AWS_REGION S3_BUCKET
      
      - |
        echo "Checking if bucket $S3_BUCKET exists..."
        if aws s3 ls "s3://$S3_BUCKET" >/dev/null 2>&1; then
          echo "Bucket $S3_BUCKET already exists."
        else
          echo "Creating bucket $S3_BUCKET..."
          aws s3 mb "s3://$S3_BUCKET" || echo "Bucket may already exist, continuing..."
        fi
      
      - |
        # SQL Agent Stack
        if [ "$BUILD_TYPE" == "sql-stack" ]; then
          # Make sure the cloudformation directory exists
          aws s3api put-object --bucket $S3_BUCKET --key cloudformation/sql-agent/ --content-length 0 || true
          
          # Upload the CloudFormation template to S3
          if [ -d "cdk-templates" ]; then 
            echo "Uploading CloudFormation template..."
            aws s3 cp cdk-templates/ s3://${S3_BUCKET}/cloudformation/sql-agent/ --recursive
          else 
            echo "CloudFormation template not found, synth may have failed"
            exit 1
          fi
          
          echo "CloudFormation template available at s3://$S3_BUCKET/cloudformation/sql-agent/"
        
        # Lambda Extension
        elif [ "$BUILD_TYPE" == "lambda-extension" ]; then
          # Make sure the lambda-layers directory exists
          aws s3api put-object --bucket $S3_BUCKET --key lambda-layers/ --content-length 0 || true
          
          # Upload extension ZIP files
          cd lambda/extensions/long-content
          
          if [ -f extension-arm.zip ]; then 
            echo "Uploading ARM extension..."
            aws s3 cp extension-arm.zip s3://${S3_BUCKET}/lambda-layers/
          else 
            echo "ARM zip not found, skipping upload"
          fi
          
          if [ -f extension-x86.zip ]; then 
            echo "Uploading x86 extension..."
            aws s3 cp extension-x86.zip s3://${S3_BUCKET}/lambda-layers/
          else 
            echo "x86 zip not found, skipping upload"
          fi
          
          cd ../../..
          echo "Lambda extensions available at s3://$S3_BUCKET/lambda-layers/"
        
        # Web Scraper Lambda (TypeScript)
        elif [ "$BUILD_TYPE" == "web-scraper" ]; then
          # Make sure the lambda directory exists
          aws s3api put-object --bucket $S3_BUCKET --key lambda/web-scraper/ --content-length 0 || true
          
          # Upload Lambda code
          cd lambda/tools/web-scraper
          zip -r lambda.zip dist/
          aws s3 cp lambda.zip s3://${S3_BUCKET}/lambda/web-scraper/lambda.zip
          cd ../../..
          
          echo "Lambda code available at s3://$S3_BUCKET/lambda/web-scraper/"
        
        # Python Lambda (e.g., db-interface)
        elif [ "$BUILD_TYPE" == "db-interface" ]; then
          # Make sure the lambda directory exists
          aws s3api put-object --bucket $S3_BUCKET --key lambda/db-interface/ --content-length 0 || true
          
          # Upload Lambda code
          cd lambda/tools/db-interface
          zip -r lambda.zip *.py
          aws s3 cp lambda.zip s3://${S3_BUCKET}/lambda/db-interface/lambda.zip
          cd ../../..
          
          echo "Lambda code available at s3://$S3_BUCKET/lambda/db-interface/"
        
        # Rust Lambda (e.g., WebScraperMemory)
        elif [ "$BUILD_TYPE" == "web-scraper-memory" ]; then
          # Make sure the lambda directory exists
          aws s3api put-object --bucket $S3_BUCKET --key lambda/web-scraper-memory/ --content-length 0 || true
          
          # Upload Lambda code
          cd lambda/tools/WebScraperMemory
          zip -j lambda.zip target/lambda/release/bootstrap
          aws s3 cp lambda.zip s3://${S3_BUCKET}/lambda/web-scraper-memory/lambda.zip
          cd ../../..
          
          echo "Lambda code available at s3://$S3_BUCKET/lambda/web-scraper-memory/"
        fi

artifacts:
  files:
    - cdk-templates/**/*
    - lambda/extensions/long-content/extension-arm.zip
    - lambda/extensions/long-content/extension-x86.zip
    - lambda/tools/web-scraper/dist/**/*
    - lambda/tools/web-scraper/lambda.zip
    - lambda/tools/db-interface/lambda.zip
    - lambda/tools/WebScraperMemory/lambda.zip
  discard-paths: no
  base-directory: '.'

cache:
  paths:
    - '/root/.cargo/registry/**/*'
    - '/root/.cargo/git/**/*'
    - '/root/.cache/pip/**/*'
    - 'lambda/tools/web-scraper/node_modules/**/*'
    - '/root/.cache/go-build/**/*'
    - '/go/pkg/mod/**/*'
    - '/root/.m2/**/*'
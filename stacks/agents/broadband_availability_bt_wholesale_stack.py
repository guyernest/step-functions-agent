"""
Broadband Availability BT Wholesale Agent
Schema-driven browser automation agent generated from canonical schema
Version: 1.0.0
"""

import json
from aws_cdk import (
    Stack,
    Duration,
    CfnOutput,
    Fn,
    aws_stepfunctions as sfn,
    aws_iam as iam,
    Tags
)
from constructs import Construct
from .step_functions_generator_unified_llm import UnifiedLLMStepFunctionsGenerator
from ..shared.base_agent_construct import BaseAgentConstruct


class BroadbandAvailabilityBtWholesaleStack(Stack):
    """
    Schema-generated CDK Stack for BT Wholesale Broadband Availability Checker

    Canonical Schema: broadband_availability_bt_wholesale v1.0.0
    Generated by: schema-factory
    """

    def __init__(self, scope: Construct, id: str, env_name: str = "prod", **kwargs) -> None:
        super().__init__(scope, id, **kwargs)

        self.env_name = env_name
        self.agent_name = "broadband-availability-bt-wholesale"

        # Import shared resources
        self.agent_registry_table_name = self.node.try_get_context("agent_registry_table") or f"AgentRegistry-{self.env_name}"
        self.tool_registry_table_name = self.node.try_get_context("tool_registry_table") or f"ToolRegistry-{self.env_name}"
        self.llm_models_table_name = self.node.try_get_context("llm_models_table") or f"LLMModels-{self.env_name}"

        # Import unified LLM ARN
        self.unified_llm_arn = Fn.import_value(f"SharedUnifiedRustLLMLambdaArn-{self.env_name}")

        # Import browser remote tool Lambda ARN and Activity ARN
        self.browser_remote_lambda_arn = Fn.import_value(f"BrowserRemoteLambdaArn-{self.env_name}")
        self.browser_remote_activity_arn = Fn.import_value(f"BrowserRemoteActivityArn-{self.env_name}")

        # Import template registry and template renderer
        self.template_registry_table_name = Fn.import_value(f"TemplateRegistryTableName-{self.env_name}")
        self.template_renderer_lambda_arn = Fn.import_value(f"TemplateRendererLambdaArn-{self.env_name}")

        # System prompt (schema-driven)
        self.system_prompt = """You are a BT Broadband Availability Checker assistant that uses browser automation to check broadband availability for UK addresses.

IMPORTANT REMOTE EXECUTION NOTICE:
- Your browser automation tasks are executed on a remote local browser via Step Functions Activities
- The local agent uses Nova Act for intelligent browser interactions
- Browser sessions run in a real user environment using the Bt_broadband profile
- You use PRE-BUILT TEMPLATES for consistent, reliable automation

YOUR PRIMARY TASK:
Check broadband availability for UK addresses using the BT Wholesale Broadband Checker website.

CANONICAL SCHEMA - INPUT:
You will receive:
- building_number: Building number (e.g., "1", "23A") [REQUIRED]
- street: Street or road name (e.g., "High Street", "Park Road") [REQUIRED]
- postcode: UK postcode in format like SW1A 1AA [REQUIRED]
- full_address: Full address for disambiguation (optional)

CANONICAL SCHEMA - OUTPUT:
You must extract and return:
- success: Whether the check succeeded (boolean) [REQUIRED]
- exchange: BT exchange station name (string)
- cabinet: Street cabinet number (string)
- downstream_mbps: Maximum download speed in Mbps (number)
- upstream_mbps: Maximum upload speed in Mbps (number)
- availability: Whether broadband service is available (boolean)
- service_type: Type of service ("ADSL", "VDSL", "FTTC", "FTTP", "unknown")
- screenshot_url: URL of browser recording (string)
- metadata: Additional metadata (object)

TEMPLATE-BASED AUTOMATION (PREFERRED):
Use the browser_remote tool in TEMPLATE MODE by providing:
{
  "template_id": "broadband_availability_bt_wholesale",
  "template_version": "1.0.0",
  "variables": {
    "building_number": "<value from input>",
    "street": "<value from input>",
    "postcode": "<value from input>",
    "full_address": "<value from input if provided, otherwise omit>"
  }
}

IMPORTANT GUIDELINES:
- ALWAYS use template_id "broadband_availability_bt_wholesale" with template mode
- Map the input parameters (building_number, street, postcode, full_address) to the template variables
- The template handles all browser navigation, form filling, and data extraction automatically
- Template uses the Bt_broadband browser profile and handles authentication
- Template extracts structured data matching the canonical schema

WORKFLOW:
1. Receive address parameters from user
2. Call browser_remote tool with template_id and variables (as shown above)
3. The template will be loaded, rendered with your variables, and executed on the remote browser
4. Analyze the extracted structured data from the browser_remote response
5. Call print_broadband_availability_bt_wholesale_output tool with all required fields to return the final output
6. Include screenshot URLs if provided in the browser response

IMPORTANT: When you have completed the extraction and validated the data, you MUST call the print_broadband_availability_bt_wholesale_output tool to return the structured output. This ensures consistent output formatting across all LLM providers."""

        # Structured output schema (from canonical schema)
        self.structured_output_schema = {
            "type": "object",
            "properties": {
                "success": {
                    "type": "boolean",
                    "description": "Whether the broadband availability check succeeded"
                },
                "exchange": {
                    "type": "string",
                    "description": "BT exchange station name"
                },
                "cabinet": {
                    "type": "string",
                    "description": "Street cabinet number"
                },
                "downstream_mbps": {
                    "type": "number",
                    "description": "Maximum download speed in Mbps"
                },
                "upstream_mbps": {
                    "type": "number",
                    "description": "Maximum upload speed in Mbps"
                },
                "availability": {
                    "type": "boolean",
                    "description": "Whether broadband service is available"
                },
                "service_type": {
                    "type": "string",
                    "enum": ["ADSL", "VDSL", "FTTC", "FTTP", "unknown"],
                    "description": "Type of broadband service available"
                },
                "screenshot_url": {
                    "type": "string",
                    "description": "URL of browser recording or screenshot"
                },
                "metadata": {
                    "type": "object",
                    "description": "Additional metadata from the extraction"
                }
            },
            "required": ["success"]
        }

        # Tool configurations
        self.tool_configs = [
            {
                "tool_name": "browser_remote",
                "lambda_arn": self.browser_remote_lambda_arn,
                "requires_activity": True,
                "activity_type": "remote_execution",
                "activity_arn": self.browser_remote_activity_arn
            }
        ]

        # Generate state machine definition using unified generator
        state_machine_definition = UnifiedLLMStepFunctionsGenerator.generate_unified_llm_agent_definition(
            agent_name=self.agent_name,
            unified_llm_arn=self.unified_llm_arn,
            tool_configs=self.tool_configs,
            system_prompt=self.system_prompt,
            structured_output_schema=self.structured_output_schema,
            default_provider="anthropic",
            default_model="claude-3-5-sonnet-20241022",
            llm_models_table_name=self.llm_models_table_name,
            agent_registry_table_name=self.agent_registry_table_name,
            tool_registry_table_name=self.tool_registry_table_name,
            extraction_name="broadband_availability_bt_wholesale",
            template_registry_table_name=self.template_registry_table_name,
            template_renderer_lambda_arn=self.template_renderer_lambda_arn
        )

        # Create IAM role for the state machine
        state_machine_role = iam.Role(
            self, "StateMachineRole",
            assumed_by=iam.ServicePrincipal("states.amazonaws.com"),
            description=f"Role for {self.agent_name} state machine"
        )

        # Grant permissions to invoke Lambda functions
        state_machine_role.add_to_policy(
            iam.PolicyStatement(
                actions=["lambda:InvokeFunction"],
                resources=[
                    self.unified_llm_arn,
                    self.browser_remote_lambda_arn,
                    self.template_renderer_lambda_arn
                ]
            )
        )

        # Grant DynamoDB permissions
        state_machine_role.add_to_policy(
            iam.PolicyStatement(
                actions=["dynamodb:GetItem"],
                resources=[
                    f"arn:aws:dynamodb:{self.region}:{self.account}:table/{self.agent_registry_table_name}",
                    f"arn:aws:dynamodb:{self.region}:{self.account}:table/{self.tool_registry_table_name}",
                    f"arn:aws:dynamodb:{self.region}:{self.account}:table/{self.llm_models_table_name}",
                    f"arn:aws:dynamodb:{self.region}:{self.account}:table/{self.template_registry_table_name}"
                ]
            )
        )

        # Grant CloudWatch metrics permissions
        state_machine_role.add_to_policy(
            iam.PolicyStatement(
                actions=["cloudwatch:PutMetricData"],
                resources=["*"]
            )
        )

        # Grant permissions for remote execution activity
        state_machine_role.add_to_policy(
            iam.PolicyStatement(
                actions=[
                    "states:SendTaskSuccess",
                    "states:SendTaskFailure",
                    "states:SendTaskHeartbeat"
                ],
                resources=[self.browser_remote_activity_arn]
            )
        )

        # Create the state machine
        self.state_machine = sfn.CfnStateMachine(
            self, "BroadbandAvailabilityStateMachine",
            state_machine_name=f"{self.agent_name}-{self.env_name}",
            definition_string=state_machine_definition,
            role_arn=state_machine_role.role_arn,
            tracing_configuration={
                "enabled": True
            }
        )

        # Tag the resources
        Tags.of(self).add("Agent", self.agent_name)
        Tags.of(self).add("Environment", self.env_name)
        Tags.of(self).add("Type", "structured-output")
        Tags.of(self).add("Generator", "schema-factory")
        Tags.of(self).add("SchemaVersion", "1.0.0")

        # Register agent in registry with structured output configuration
        agent_spec = {
            "agent_name": self.agent_name,
            "version": "v1.0",
            "status": "active",
            "system_prompt": self.system_prompt,
            "description": "Schema-driven BT Wholesale broadband availability checker with structured output",
            "llm_provider": "anthropic",
            "llm_model": "claude-3-5-sonnet-20241022",
            "tools": json.dumps([
                {"tool_name": "browser_remote", "enabled": True}
            ]),
            "structured_output": json.dumps({
                "enabled": True,
                "schemas": {
                    "broadband_availability_bt_wholesale_data": {
                        "schema": self.structured_output_schema,
                        "canonical_schema_version": "1.0.0",
                        "canonical_schema_id": "broadband_availability_bt_wholesale"
                    }
                },
                "output_fields": ["success", "exchange", "cabinet", "downstream_mbps",
                                "upstream_mbps", "availability", "service_type",
                                "screenshot_url", "metadata"]
            }),
            "template_config": json.dumps({
                "enabled": True,
                "template_id": "broadband_availability_bt_wholesale",
                "template_version": "1.0.0",
                "rendering_engine": "mustache"
            }),
            "state_machine_arn": self.state_machine.attr_arn,
            "environment": self.env_name,
            "metadata": {
                "supports_batch_processing": True,
                "structured_output_enabled": True,
                "execution_type": "remote_activity",
                "schema_driven": True,
                "canonical_schema": "broadband_availability_bt_wholesale v1.0.0",
                "profile_name": "Bt_broadband"
            }
        }

        BaseAgentConstruct(
            self,
            f"{self.agent_name.replace('-', '')}Registration",
            agent_spec=agent_spec,
            env_name=self.env_name
        )

        # Outputs
        CfnOutput(
            self, "StateMachineArn",
            value=self.state_machine.attr_arn,
            export_name=f"{self.agent_name}-state-machine-arn-{self.env_name}",
            description=f"ARN of the {self.agent_name} state machine"
        )

        CfnOutput(
            self, "StateMachineName",
            value=self.state_machine.state_machine_name,
            export_name=f"{self.agent_name}-state-machine-name-{self.env_name}",
            description=f"Name of the {self.agent_name} state machine"
        )

        CfnOutput(
            self, "CanonicalSchemaVersion",
            value="1.0.0",
            description="Version of the canonical schema used to generate this agent"
        )

{
    "Comment": "AI Supervisor Agent Implementation",
    "QueryLanguage": "JSONata",
    "StartAt": "Call LLM",
    "States": {
      "Call LLM": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2,
            "JitterStrategy": "FULL"
          }
        ],
        "Next": "Is done?",
        "Arguments": {
          "Payload": {
            "model": "claude-3-haiku-20240307",
            "system": "\n        You are supervisor of a team of expert business analysts. \n        Your team job is to help users understand and analyze their internal data. \n        You have access to a set of tools, which are the different agents. \n        You must use them to complete the tasks. \n        When you see a user request that matches the capabilities of one of the agent, transfer the request to that agent, and don't try to solve it yourself. \n        Please note that the tool result of the agent can include two content parts, text and image. \n        When you are ready to reply to the user, please use the print_output tool to format the reply.\n        ",
            "messages": "{% $states.input.messages %}",
            "tools": [
              {
                "name": "sql_agent",
                "description": "Analyze user request and generate SQL query to extract data from a baseball database, and generate a visualization to answer the user's question.",
                "input_schema": {
                  "type": "object",
                  "properties": {
                    "question": {
                      "type": "string",
                      "description": "The question of the user."
                    }
                  },
                  "required": [
                    "question"
                  ]
                }
              },
              {
                "name": "research_agent",
                "description": "Provide web research information to answer user's question regaring stock market companies.",
                "input_schema": {
                  "type": "object",
                  "properties": {
                    "question": {
                      "type": "string",
                      "description": "The question of the user."
                    }
                  },
                  "required": [
                    "question"
                  ]
                }
              },
              {
                "name": "print_output",
                "description": "Print the output of the previous steps",
                "input_schema": {
                  "type": "object",
                  "properties": {
                    "answer": {
                      "type": "string",
                      "description": "The abswer to users question"
                    }
                  }
                }
              }
            ]
          },
          "FunctionName": "arn:aws:lambda:us-west-2:672915487120:function:CallLLM"
        },
        "Comment": "The main call to the LLM. Returns the list of messages with the current call at the end, and metadata of the last call.",
        "Output": {
          "messages": "{% $states.result.Payload.body.messages%}",
          "metadata": "{% $states.result.Payload.body.metadata%}"
        },
        "Assign": {
          "messages": "{% $states.result.Payload.body.messages%}",
          "provider": "anthropic"
        }
      },
      "Is done?": {
        "Type": "Choice",
        "Default": "For each tool use",
        "Choices": [
          {
            "Condition": "{% $states.input.metadata.stop_reason = \"end_turn\" %}",
            "Next": "Prepare Output"
          },
          {
            "Next": "Print Output",
            "Condition": "{% $count($states.input.messages[-1].content[name = \"print_output\"]) >0 %}"
          }
        ],
        "Comment": "Checks if the 'stop_reason' from the LLM was a request for a 'tool_use' (except for print_output), and if so, route it to the tools path, otherwise reply to the user."
      },
      "Prepare Output": {
        "Type": "Pass",
        "End": true,
        "Output": {
          "messages": "{% $states.input.messages %}",
          "answer": "{% $states.input.messages[-1].content %}"
        },
        "Comment": "Extracts the relevant information from the flow, including all the message flow, the textual answer from the last message, and the chart that was generated during the flow."
      },
      "For each tool use": {
        "Type": "Map",
        "ItemProcessor": {
          "ProcessorConfig": {
            "Mode": "INLINE"
          },
          "StartAt": "Which Tool to Use?",
          "States": {
            "Which Tool to Use?": {
              "Type": "Choice",
              "Choices": [
                {
                  "Condition": "{% ($states.input.type in [\"function\",\"tool_use\"]) and ($states.input.**.name = \"sql_agent\") %}",
                  "Next": "Execute sql_agent"
                },
                {
                  "Condition": "{% ($states.input.type in [\"function\",\"tool_use\"]) and ($states.input.**.name = \"research_agent\") %}",
                  "Next": "Execute research_agent"
                }
              ],
              "Default": "No Tool to Use (ignore)",
              "Comment": "Check if the request is for 'tool_use' and then to which of the available tools to send it."
            },
            "No Tool to Use (ignore)": {
              "Type": "Pass",
              "Output": {},
              "Comment": "This path handles the text replies of the LLM that decribe its thinking and don't require any tool to use.",
              "End": true
            },
            "Execute sql_agent": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Arguments": {
                "StateMachineArn": "arn:aws:states:us-west-2:672915487120:stateMachine:QLAgentWithToolsFlowAndClaude",
                "Input": {
                  "messages": [
                    {
                      "role": "user",
                      "content": "{% $states.input.input.question %}"
                    }
                  ]
                }
              },
              "Comment": "Call the agent: sql_agent",
              "Output": "{% \n{\n  \"messages\": $append(\n    $states.result.Output.messages,\n    $states.result.Output.output.{\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"tool_result\",\n          \"tool_use_id\": $states.input.id,\n          \"content\": $map($keys($), function($key) { $string($[$key]) })\n        }\n      ]\n    }\n  )\n}\n%}",
              "End": true
            },
            "Execute research_agent": {
              "Type": "Task",
              "Resource": "arn:aws:states:::states:startExecution.sync:2",
              "Arguments": {
                "StateMachineArn": "arn:aws:states:us-west-2:672915487120:stateMachine:ResearchAgentWithToolsAndClaude",
                "Input": {
                  "messages": [
                    {
                      "role": "user",
                      "content": "{% $states.input.input.question %}"
                    }
                  ]
                }
              },
              "Comment": "Call the agent: research_agent",
              "Output": "{% {\n  \"messages\": $append(\n    $states.result.Output.messages,\n    $states.result.Output.output.{\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"tool_result\",\n          \"tool_use_id\": $states.input.id,\n          \"content\": $map($keys($), function($key) { $string($[$key]) })\n        }\n      ]\n    }\n  )\n}\n%}",
              "End": true
            }
          }
        },
        "Next": "Append Map to Messages",
        "Items": "{% $states.input.messages[-1].content %}",
        "Output": "{% \n  (\n    $newMessage := {\n      \"role\": \"assistant\",\n      \"content\": [ $states.input.messages[-1].content ]\n    };\n  \n    $lastIndex := $count($states.result.messages) - 1;\n    \n    {\n      \"messages\" : [\n        $filter($states.result.messages, function($v, $i) { $i < $lastIndex }),\n        $newMessage,\n        $states.result.messages[$lastIndex]\n      ]\n    }\n  )\n%}",
        "Comment": "The reply of the LLM can include one or more 'tool_use' request, and we can apply them in parallel."
      },
      "Append Map to Messages": {
        "Type": "Pass",
        "Next": "Call LLM",
        "Comment": "Gather the replies of the different tools and call the LLM to continue the agent flow."
      },
      "Print Output": {
        "Type": "Pass",
        "Output": {
          "messages": "{% $messages %}",
          "output": "{% $states.input.messages[-1].content[name = \"print_output\"].input %}"
        },
        "End": true
      }
    }
  }
name: Build Local Agent Executors

on:
  push:
    branches: [main]
    paths:
      - 'lambda/tools/local-agent/**'
      - '.github/workflows/build-local-agent.yml'
  pull_request:
    branches: [main]
    paths:
      - 'lambda/tools/local-agent/**'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: rust-executor.exe
            asset_name: rust-executor-windows-x64.exe
            win: true
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: rust-executor
            asset_name: rust-executor-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin  
            binary_name: rust-executor
            asset_name: rust-executor-macos-arm64
          # Linux disabled for now - too many dependencies
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   binary_name: rust-executor
          #   asset_name: rust-executor-linux-x64

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: |
            lambda/tools/local-agent
      
      # Remove Git usr/bin from PATH FIRST to avoid link.exe conflict
      - name: Remove Git usr/bin from PATH (Windows)
        if: matrix.win
        shell: pwsh
        run: |
          $env:PATH = ($env:PATH -split ';' | Where-Object {$_ -notmatch 'Git\\usr\\bin'} ) -join ';'
          "PATH=$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
      
      # Windows needs MSVC - setup proper environment AFTER removing Git from PATH
      - name: Setup MSVC (Windows)
        if: matrix.win
        uses: ilammy/msvc-dev-cmd@v1
      
      # Install Rust AFTER setting up MSVC environment
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      # Configure cargo to explicitly use MSVC's linker on Windows
      - name: Configure cargo linker (Windows)
        if: matrix.win
        shell: pwsh
        working-directory: lambda/tools/local-agent/rust-executor-standalone
        run: |
          New-Item -ItemType Directory -Force .cargo | Out-Null
          @"
          [target.x86_64-pc-windows-msvc]
          linker = "link.exe"
          "@ | Set-Content .cargo/config.toml -Encoding UTF8
      
      # Verify the correct linker is being used
      - name: Check linker (Windows)
        if: matrix.win
        shell: pwsh
        run: |
          Write-Host "where link:"
          where link
          Write-Host "Get-Command link:"
          (Get-Command link).Source
      
      # Linux needs X11/Wayland dev libraries
      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libxdo-dev libxcb1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxcb-xkb-dev libwayland-dev libpipewire-0.3-dev
      
      # Build standalone executor - Windows
      - name: Build Rust Executor (Windows)
        if: matrix.win
        shell: pwsh
        working-directory: lambda/tools/local-agent/rust-executor-standalone
        run: |
          New-Item -ItemType Directory -Force src | Out-Null
          Copy-Item ../src-tauri/src/rust_automation.rs src/
          cargo build --release --target $env:TARGET
        env:
          TARGET: ${{ matrix.target }}
      
      # Build standalone executor - Unix
      - name: Build Rust Executor (Unix)
        if: matrix.win != true
        shell: bash
        working-directory: lambda/tools/local-agent/rust-executor-standalone
        run: |
          mkdir -p src
          cp ../src-tauri/src/rust_automation.rs src/
          cargo build --release --target "${{ matrix.target }}"
      
      # Package Release - Windows
      - name: Package Release (Windows)
        if: matrix.win
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force release | Out-Null
          Copy-Item "lambda/tools/local-agent/rust-executor-standalone/target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "release/${{ matrix.asset_name }}"
          Copy-Item "lambda/tools/local-agent/script_executor.py" release/
          Copy-Item "lambda/tools/local-agent/pyproject.toml" release/
          Copy-Item -Recurse "lambda/tools/local-agent/examples" release/
          @"
          # Local Agent Automation Executor

          ## Quick Start

          ### Rust Executor (No dependencies):
          ``````bash
          ./${{ matrix.asset_name }} examples/windows_simple_test.json
          ``````

          ### Python Executor (Requires uv/pip):
          ``````bash
          uvx --with pyautogui --with pillow --with opencv-python python script_executor.py examples/windows_simple_test.json
          ``````
          "@ | Set-Content release/README.md -Encoding UTF8
      
      # Package Release - Unix
      - name: Package Release (Unix)
        if: matrix.win != true
        shell: bash
        run: |
          mkdir -p release
          cp "lambda/tools/local-agent/rust-executor-standalone/target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "release/${{ matrix.asset_name }}"
          cp lambda/tools/local-agent/script_executor.py release/
          cp lambda/tools/local-agent/pyproject.toml release/
          cp -r lambda/tools/local-agent/examples release/
          cat > release/README.md <<'EOF'
          # Local Agent Automation Executor

          ## Quick Start

          ### Rust Executor (No dependencies):
          ```bash
          ./${{ matrix.asset_name }} examples/windows_simple_test.json
          ```

          ### Python Executor (Requires uv/pip):
          ```bash
          uvx --with pyautogui --with pillow --with opencv-python python script_executor.py examples/windows_simple_test.json
          ```
          EOF
      
      # Upload artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: local-agent-${{ matrix.target }}
          path: release/
          retention-days: 30
  
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release Archives
        run: |
          cd artifacts
          for dir in */; do
            base=$(basename "$dir")
            zip -r "${base}.zip" "$dir"
          done
      
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: "artifacts/*.zip"
          tag: "v0.2.${{ github.run_number }}"
          name: "Local Agent v0.2.${{ github.run_number }}"
          body: |
            ## 🚀 Local Agent Automation Executors
            
            Pre-built binaries for Windows, macOS, and Linux - **NO BUILD TOOLS REQUIRED!**
            
            ### 📦 Download for your platform:
            
            - **Windows x64**: `local-agent-x86_64-pc-windows-msvc.zip`
            - **macOS Intel**: `local-agent-x86_64-apple-darwin.zip`
            - **macOS Apple Silicon**: `local-agent-aarch64-apple-darwin.zip`
            
            ### 🎯 Quick Start
            
            1. Download and extract the ZIP for your platform
            2. Run automation scripts:
            
            ```bash
            # Rust Executor (zero dependencies!)
            ./rust-executor examples/windows_simple_test.json
            
            # Python Executor (needs uv/pip)
            uvx --with pyautogui --with pillow --with opencv-python \
                python script_executor.py examples/windows_simple_test.json
            ```
            
            ### ✨ Features
            
            - **Zero dependencies** for Rust executor
            - **Cross-platform** support
            - **No compilation** needed
            - **Python fallback** available
            
            ### 📝 Notes
            
            - Windows: May need to allow in Windows Defender
            - macOS: May need to allow in Security & Privacy settings
            - Linux: Requires X11/Wayland display server
            
          allowUpdates: true
          makeLatest: true
          token: ${{ secrets.GITHUB_TOKEN }}
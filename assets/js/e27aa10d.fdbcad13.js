"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9856],{3358:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"tutorial-basics/create-a-tool","title":"Building a New Tool","description":"This tutorial will guide you through the process of creating a new tool for the AI agents system using Python. While Python is used in this example, the system supports multiple languages including TypeScript, Java, and Rust. Future tutorials will cover these languages.","source":"@site/docs/tutorial-basics/create-a-tool.md","sourceDirName":"tutorial-basics","slug":"/tutorial-basics/create-a-tool","permalink":"/step-functions-agent/docs/docs/tutorial-basics/create-a-tool","draft":false,"unlisted":false,"editUrl":"https://github.com/guyernest/step-functions-agent/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/create-a-tool.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Tutorial - Basics","permalink":"/step-functions-agent/docs/docs/category/tutorial---basics"},"next":{"title":"Create a Document","permalink":"/step-functions-agent/docs/docs/tutorial-basics/create-a-document"}}');var o=t(4848),l=t(8453);const i={sidebar_position:1},r="Building a New Tool",a={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create the Tool Directory Structure",id:"step-1-create-the-tool-directory-structure",level:2},{value:"Step 2: Set Up the Python Environment",id:"step-2-set-up-the-python-environment",level:2},{value:"Step 3: Implement the Tool Handler",id:"step-3-implement-the-tool-handler",level:2},{value:"Step 4: Add Unit Tests",id:"step-4-add-unit-tests",level:2},{value:"Step 5: Configure SAM Template",id:"step-5-configure-sam-template",level:2},{value:"Step 6: Deploy Using CDK",id:"step-6-deploy-using-cdk",level:2},{value:"Step 7: Test Locally",id:"step-7-test-locally",level:2},{value:"Step 8: Deploy",id:"step-8-deploy",level:2},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"building-a-new-tool",children:"Building a New Tool"})}),"\n",(0,o.jsx)(n.p,{children:"This tutorial will guide you through the process of creating a new tool for the AI agents system using Python. While Python is used in this example, the system supports multiple languages including TypeScript, Java, and Rust. Future tutorials will cover these languages."}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"AWS Account"}),"\n",(0,o.jsx)(n.li,{children:"AWS CDK installed"}),"\n",(0,o.jsx)(n.li,{children:"Python 3.12 or later"}),"\n",(0,o.jsx)(n.li,{children:"Basic understanding of AWS Lambda"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-1-create-the-tool-directory-structure",children:"Step 1: Create the Tool Directory Structure"}),"\n",(0,o.jsxs)(n.p,{children:["Create a new directory for your tool in the ",(0,o.jsx)(n.code,{children:"lambda/tools"})," directory:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir -p lambda/tools/my-new-tool\ncd lambda/tools/my-new-tool\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-2-set-up-the-python-environment",children:"Step 2: Set Up the Python Environment"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create a requirements.in file for your tool's dependencies:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"touch requirements.in\n"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Add your dependencies to requirements.in. For example:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-plaintext",metastring:'title="requirements.in"',children:"requests\nboto3\n"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Generate requirements.txt using uv:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"uv pip compile requirements.in -o requirements.txt\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-3-implement-the-tool-handler",children:"Step 3: Implement the Tool Handler"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create an index.py file in your tool directory with this basic structure:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="index.py"',children:'import json\nfrom typing import Dict, Any\n\ndef lambda_handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:\n    # Extract tool information from the event\n    tool_use = event\n    tool_name = tool_use[\'name\']\n    tool_input = tool_use[\'input\']\n    \n    try:\n        # Implement your tool logic here\n        match tool_name:\n            case \'my_tool_function\':\n                result = handle_my_tool(tool_input)\n            case _:\n                result = json.dumps({\n                    \'error\': f"Unknown tool name: {tool_name}"\n                })\n                \n        # Return the result in the expected format\n        return {\n            "type": "tool_result",\n            "name": tool_name,\n            "tool_use_id": tool_use["id"],\n            "content": result\n        }\n        \n    except Exception as e:\n        return {\n            "type": "tool_result",\n            "name": tool_name,\n            "tool_use_id": tool_use["id"],\n            "content": json.dumps({\n                \'error\': str(e)\n            })\n        }\n\ndef handle_my_tool(input_data: Dict[str, Any]) -> str:\n    # Implement your specific tool logic here\n    return json.dumps({\n        \'result\': \'Tool execution successful\',\n        \'data\': input_data\n    })\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-4-add-unit-tests",children:"Step 4: Add Unit Tests"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Create a tests directory:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir tests\n"})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Create a test file ",(0,o.jsx)(n.code,{children:"tests/test_my_tool.py"})," with the following content:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="tests/test_my_tool.py"',children:'import pytest\nfrom my_new_tool.index import lambda_handler\n\ndef test_my_tool():\n    event = {\n        "name": "my_tool_function",\n        "id": "test_execution_id",\n        "input": {"test": "data"},\n        "type": "tool_use"\n    }\n    \n    response = lambda_handler(event, None)\n    \n    assert response["type"] == "tool_result"\n    assert response["name"] == "my_tool_function"\n    assert response["tool_use_id"] == "test_execution_id"\n    assert "content" in response\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-5-configure-sam-template",children:"Step 5: Configure SAM Template"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Add your function to the ",(0,o.jsx)(n.code,{children:"template.yaml"})," file:"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",metastring:'title="template.yaml"',children:"MyNewToolFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      CodeUri: lambda/tools/my-new-tool\n      Handler: index.lambda_handler\n      Runtime: python3.12\n      Timeout: 90\n      MemorySize: 128\n      Environment:\n        Variables:\n          POWERTOOLS_SERVICE_NAME: ai-agents-tools\n      Architectures:\n        - arm64\n      Policies:\n        - AWSLambdaBasicExecutionRole\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-6-deploy-using-cdk",children:"Step 6: Deploy Using CDK"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Add the following to your CDK stack:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",metastring:'title="cdk_stack.py"',children:'from aws_cdk import (\n    aws_lambda as _lambda,\n    aws_lambda_python_alpha as _lambda_python,\n    Duration,\n)\n\n# Create the Lambda function\nmy_new_tool_lambda = _lambda_python.PythonFunction(\n    self, \n    "MyNewToolFunction",\n    function_name="MyNewToolFunction",\n    description="My new tool Lambda function for AI agents",\n    entry="lambda/tools/my-new-tool",\n    runtime=_lambda.Runtime.PYTHON_3_12,\n    timeout=Duration.seconds(90),\n    memory_size=128,\n    index="index.py",\n    handler="lambda_handler",\n    architecture=_lambda.Architecture.ARM_64,\n)\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-7-test-locally",children:"Step 7: Test Locally"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["Create a test event file ",(0,o.jsx)(n.code,{children:"tests/my-tool-event.json"}),":"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",metastring:'title="tests/my-tool-event.json"',children:'{\n    "name": "my_tool_function",\n    "id": "test_execution_id",\n    "input": {\n      "test": "data"\n    },\n    "type": "tool_use"\n}\n'})}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Test using SAM CLI:"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sam build\nsam local invoke MyNewToolFunction -e tests/my-tool-event.json\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-8-deploy",children:"Step 8: Deploy"}),"\n",(0,o.jsx)(n.p,{children:"Deploy your changes using CDK:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cdk deploy\n"})}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsx)(n.p,{children:"Add more sophisticated error handling\nImplement additional tool functions\nAdd integration tests\nConsider adding CloudWatch logs and metrics\nDocument the tool's API for LLM consumption\nFuture tutorials will cover implementing tools in other supported languages like TypeScript, Java, and Rust."})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var s=t(6540);const o={},l=s.createContext(o);function i(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);